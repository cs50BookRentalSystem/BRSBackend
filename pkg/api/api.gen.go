// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"BRSBackend/pkg/models"
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
)

// BookRentStats defines model for BookRentStats.
type BookRentStats struct {
	BookTitle   *string `json:"book_title,omitempty"`
	RentedCount *int    `json:"rented_count,omitempty"`
}

// Books defines model for Books.
type Books = models.Book

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest = models.Librarian

// OverdueUser defines model for OverdueUser.
type OverdueUser struct {
	CardId      *string             `json:"card_id,omitempty"`
	CartId      *openapi_types.UUID `json:"cart_id,omitempty"`
	DateRented  *time.Time          `json:"date_rented,omitempty"`
	DaysOverdue *int                `json:"days_overdue,omitempty"`
	Phone       *string             `json:"phone,omitempty"`
	StudentName *string             `json:"student_name,omitempty"`
	TotalBooks  *int                `json:"total_books,omitempty"`
}

// PaginationInfo defines model for PaginationInfo.
type PaginationInfo struct {
	// HasNext Whether there are more items available
	HasNext *bool `json:"has_next,omitempty"`

	// HasPrevious Whether there are previous items available
	HasPrevious *bool `json:"has_previous,omitempty"`

	// Limit Maximum number of items returned
	Limit *int `json:"limit,omitempty"`

	// Offset Number of items skipped
	Offset *int `json:"offset,omitempty"`

	// Total Total number of items available
	Total *int `json:"total,omitempty"`
}

// RentReport defines model for RentReport.
type RentReport struct {
	TopBooks      *[]BookRentStats `json:"top_books,omitempty"`
	TopOverdue    *[]OverdueUser   `json:"top_overdue,omitempty"`
	TotalRents    *int             `json:"total_rents,omitempty"`
	TotalStudents *int             `json:"total_students,omitempty"`
}

// RentRequest defines model for RentRequest.
type RentRequest struct {
	BookIds   []openapi_types.UUID `json:"book_ids"`
	StudentId openapi_types.UUID   `json:"student_id"`
}

// RentSummary defines model for RentSummary.
type RentSummary struct {
	BookTitle   *string             `json:"book_title,omitempty"`
	CartId      *openapi_types.UUID `json:"cart_id,omitempty"`
	RentId      *openapi_types.UUID `json:"rent_id,omitempty"`
	RentedDate  *time.Time          `json:"rented_date,omitempty"`
	StudentName *string             `json:"student_name,omitempty"`
}

// Students defines model for Students.
type Students = models.Student

// LimitParam defines model for limitParam.
type LimitParam = int32

// OffsetParam defines model for offsetParam.
type OffsetParam = int32

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// InvalidRequestBody defines model for InvalidRequestBody.
type InvalidRequestBody = Error

// InvalidRequestParameters defines model for InvalidRequestParameters.
type InvalidRequestParameters = Error

// UnauthorizedError defines model for UnauthorizedError.
type UnauthorizedError = Error

// ListOrSearchBooksParams defines parameters for ListOrSearchBooks.
type ListOrSearchBooksParams struct {
	// Query Optional search term (partial title match or exact ID match)
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Limit Maximum number of items to return.
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip before returning the results.
	Offset *OffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListOverdueRentalsParams defines parameters for ListOverdueRentals.
type ListOverdueRentalsParams struct {
	StudentCardId *string `form:"student_card_id,omitempty" json:"student_card_id,omitempty"`

	// Limit Maximum number of items to return.
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip before returning the results.
	Offset *OffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListRentsParams defines parameters for ListRents.
type ListRentsParams struct {
	// BookName Filter by book title (partial match)
	BookName *string `form:"book_name,omitempty" json:"book_name,omitempty"`

	// StudentName Filter by student first or last name (partial match)
	StudentName *string `form:"student_name,omitempty" json:"student_name,omitempty"`

	// Date Filter by rent date (YYYY-MM-DD)
	Date *openapi_types.Date `form:"date,omitempty" json:"date,omitempty"`

	// Limit Maximum number of items to return.
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip before returning the results.
	Offset *OffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetRentalReportsParams defines parameters for GetRentalReports.
type GetRentalReportsParams struct {
	// Limit Maximum number of items to return.
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip before returning the results.
	Offset *OffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetRentedBooksByStudentParams defines parameters for GetRentedBooksByStudent.
type GetRentedBooksByStudentParams struct {
	// StudentCardId Student card id
	StudentCardId *string `form:"student_card_id,omitempty" json:"student_card_id,omitempty"`
}

// ReturnBooksJSONBody defines parameters for ReturnBooks.
type ReturnBooksJSONBody struct {
	CartId openapi_types.UUID `json:"cart_id"`
}

// ListAllStudentsParams defines parameters for ListAllStudents.
type ListAllStudentsParams struct {
	// Limit Maximum number of items to return.
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip before returning the results.
	Offset *OffsetParam `form:"offset,omitempty" json:"offset,omitempty"`

	// CardId Student card id
	CardId *string `form:"card_id,omitempty" json:"card_id,omitempty"`
}

// AddBookJSONRequestBody defines body for AddBook for application/json ContentType.
type AddBookJSONRequestBody = Books

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// CreateRentTransactionJSONRequestBody defines body for CreateRentTransaction for application/json ContentType.
type CreateRentTransactionJSONRequestBody = RentRequest

// ReturnBooksJSONRequestBody defines body for ReturnBooks for application/json ContentType.
type ReturnBooksJSONRequestBody ReturnBooksJSONBody

// AddStudentJSONRequestBody defines body for AddStudent for application/json ContentType.
type AddStudentJSONRequestBody = Students

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List or search books (order by newly created books)
	// (GET /books)
	ListOrSearchBooks(w http.ResponseWriter, r *http.Request, params ListOrSearchBooksParams)
	// Add a new book
	// (POST /books)
	AddBook(w http.ResponseWriter, r *http.Request)
	// Delete a Book by ID
	// (DELETE /books/{id})
	DeleteBookById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Librarian profile
	// (GET /librarian)
	Librarian(w http.ResponseWriter, r *http.Request)
	// Librarian login
	// (POST /login)
	Login(w http.ResponseWriter, r *http.Request)
	// Logout librarian
	// (POST /logout)
	Logout(w http.ResponseWriter, r *http.Request)
	// Get this OpenAPI spec
	// (GET /openapi.json)
	GetOpenAPISpec(w http.ResponseWriter, r *http.Request)
	// Get overdue rentals
	// (GET /overdues)
	ListOverdueRentals(w http.ResponseWriter, r *http.Request, params ListOverdueRentalsParams)
	// Get list of all rents with optional filters
	// (GET /rents)
	ListRents(w http.ResponseWriter, r *http.Request, params ListRentsParams)
	// Create rental transaction
	// (POST /rents)
	CreateRentTransaction(w http.ResponseWriter, r *http.Request)
	// Get rental report
	// (GET /reports)
	GetRentalReports(w http.ResponseWriter, r *http.Request, params GetRentalReportsParams)
	// List books currently rented by a student
	// (GET /returns)
	GetRentedBooksByStudent(w http.ResponseWriter, r *http.Request, params GetRentedBooksByStudentParams)
	// Mark a cart as returned
	// (PUT /returns)
	ReturnBooks(w http.ResponseWriter, r *http.Request)
	// List all students
	// (GET /students)
	ListAllStudents(w http.ResponseWriter, r *http.Request, params ListAllStudentsParams)
	// Register a new student
	// (POST /students)
	AddStudent(w http.ResponseWriter, r *http.Request)
	// Delete a Student by ID
	// (DELETE /students/{id})
	DeleteStudentById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get a Student by ID
	// (GET /students/{id})
	GetStudentById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List or search books (order by newly created books)
// (GET /books)
func (_ Unimplemented) ListOrSearchBooks(w http.ResponseWriter, r *http.Request, params ListOrSearchBooksParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add a new book
// (POST /books)
func (_ Unimplemented) AddBook(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a Book by ID
// (DELETE /books/{id})
func (_ Unimplemented) DeleteBookById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Librarian profile
// (GET /librarian)
func (_ Unimplemented) Librarian(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Librarian login
// (POST /login)
func (_ Unimplemented) Login(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Logout librarian
// (POST /logout)
func (_ Unimplemented) Logout(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get this OpenAPI spec
// (GET /openapi.json)
func (_ Unimplemented) GetOpenAPISpec(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get overdue rentals
// (GET /overdues)
func (_ Unimplemented) ListOverdueRentals(w http.ResponseWriter, r *http.Request, params ListOverdueRentalsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get list of all rents with optional filters
// (GET /rents)
func (_ Unimplemented) ListRents(w http.ResponseWriter, r *http.Request, params ListRentsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create rental transaction
// (POST /rents)
func (_ Unimplemented) CreateRentTransaction(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get rental report
// (GET /reports)
func (_ Unimplemented) GetRentalReports(w http.ResponseWriter, r *http.Request, params GetRentalReportsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List books currently rented by a student
// (GET /returns)
func (_ Unimplemented) GetRentedBooksByStudent(w http.ResponseWriter, r *http.Request, params GetRentedBooksByStudentParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Mark a cart as returned
// (PUT /returns)
func (_ Unimplemented) ReturnBooks(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all students
// (GET /students)
func (_ Unimplemented) ListAllStudents(w http.ResponseWriter, r *http.Request, params ListAllStudentsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register a new student
// (POST /students)
func (_ Unimplemented) AddStudent(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a Student by ID
// (DELETE /students/{id})
func (_ Unimplemented) DeleteStudentById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a Student by ID
// (GET /students/{id})
func (_ Unimplemented) GetStudentById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListOrSearchBooks operation middleware
func (siw *ServerInterfaceWrapper) ListOrSearchBooks(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListOrSearchBooksParams

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListOrSearchBooks(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddBook operation middleware
func (siw *ServerInterfaceWrapper) AddBook(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddBook(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteBookById operation middleware
func (siw *ServerInterfaceWrapper) DeleteBookById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteBookById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Librarian operation middleware
func (siw *ServerInterfaceWrapper) Librarian(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Librarian(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Logout(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetOpenAPISpec operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPISpec(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPISpec(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListOverdueRentals operation middleware
func (siw *ServerInterfaceWrapper) ListOverdueRentals(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListOverdueRentalsParams

	// ------------- Optional query parameter "student_card_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "student_card_id", r.URL.Query(), &params.StudentCardId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "student_card_id", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListOverdueRentals(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListRents operation middleware
func (siw *ServerInterfaceWrapper) ListRents(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRentsParams

	// ------------- Optional query parameter "book_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "book_name", r.URL.Query(), &params.BookName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "book_name", Err: err})
		return
	}

	// ------------- Optional query parameter "student_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "student_name", r.URL.Query(), &params.StudentName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "student_name", Err: err})
		return
	}

	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", r.URL.Query(), &params.Date)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "date", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRents(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateRentTransaction operation middleware
func (siw *ServerInterfaceWrapper) CreateRentTransaction(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRentTransaction(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRentalReports operation middleware
func (siw *ServerInterfaceWrapper) GetRentalReports(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRentalReportsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRentalReports(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRentedBooksByStudent operation middleware
func (siw *ServerInterfaceWrapper) GetRentedBooksByStudent(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRentedBooksByStudentParams

	// ------------- Optional query parameter "student_card_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "student_card_id", r.URL.Query(), &params.StudentCardId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "student_card_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRentedBooksByStudent(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReturnBooks operation middleware
func (siw *ServerInterfaceWrapper) ReturnBooks(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReturnBooks(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListAllStudents operation middleware
func (siw *ServerInterfaceWrapper) ListAllStudents(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAllStudentsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "card_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "card_id", r.URL.Query(), &params.CardId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "card_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAllStudents(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddStudent operation middleware
func (siw *ServerInterfaceWrapper) AddStudent(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddStudent(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteStudentById operation middleware
func (siw *ServerInterfaceWrapper) DeleteStudentById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteStudentById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetStudentById operation middleware
func (siw *ServerInterfaceWrapper) GetStudentById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStudentById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/books", wrapper.ListOrSearchBooks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/books", wrapper.AddBook)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/books/{id}", wrapper.DeleteBookById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/librarian", wrapper.Librarian)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login", wrapper.Login)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/logout", wrapper.Logout)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/openapi.json", wrapper.GetOpenAPISpec)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/overdues", wrapper.ListOverdueRentals)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/rents", wrapper.ListRents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/rents", wrapper.CreateRentTransaction)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/reports", wrapper.GetRentalReports)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/returns", wrapper.GetRentedBooksByStudent)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/returns", wrapper.ReturnBooks)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/students", wrapper.ListAllStudents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/students", wrapper.AddStudent)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/students/{id}", wrapper.DeleteStudentById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/students/{id}", wrapper.GetStudentById)
	})

	return r
}

type InternalServerErrorJSONResponse Error

type InvalidRequestBodyJSONResponse Error

type InvalidRequestParametersJSONResponse Error

type UnauthorizedErrorJSONResponse Error

type ListOrSearchBooksRequestObject struct {
	Params ListOrSearchBooksParams
}

type ListOrSearchBooksResponseObject interface {
	VisitListOrSearchBooksResponse(w http.ResponseWriter) error
}

type ListOrSearchBooks200JSONResponse struct {
	Pagination *PaginationInfo `json:"pagination,omitempty"`
	Results    *[]Books        `json:"results,omitempty"`
}

func (response ListOrSearchBooks200JSONResponse) VisitListOrSearchBooksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListOrSearchBooks400JSONResponse struct {
	InvalidRequestParametersJSONResponse
}

func (response ListOrSearchBooks400JSONResponse) VisitListOrSearchBooksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListOrSearchBooks401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response ListOrSearchBooks401JSONResponse) VisitListOrSearchBooksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListOrSearchBooks500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListOrSearchBooks500JSONResponse) VisitListOrSearchBooksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AddBookRequestObject struct {
	Body *AddBookJSONRequestBody
}

type AddBookResponseObject interface {
	VisitAddBookResponse(w http.ResponseWriter) error
}

type AddBook201ResponseHeaders struct {
	Location string
}

type AddBook201JSONResponse struct {
	Body struct {
		Message *string `json:"message,omitempty"`
	}
	Headers AddBook201ResponseHeaders
}

func (response AddBook201JSONResponse) VisitAddBookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type AddBook400JSONResponse struct{ InvalidRequestBodyJSONResponse }

func (response AddBook400JSONResponse) VisitAddBookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddBook401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response AddBook401JSONResponse) VisitAddBookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AddBook500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response AddBook500JSONResponse) VisitAddBookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteBookByIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteBookByIdResponseObject interface {
	VisitDeleteBookByIdResponse(w http.ResponseWriter) error
}

type DeleteBookById201Response struct {
}

func (response DeleteBookById201Response) VisitDeleteBookByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type DeleteBookById401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response DeleteBookById401JSONResponse) VisitDeleteBookByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteBookById404JSONResponse struct {
	Message *string `json:"message,omitempty"`
}

func (response DeleteBookById404JSONResponse) VisitDeleteBookByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteBookById500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteBookById500JSONResponse) VisitDeleteBookByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LibrarianRequestObject struct {
}

type LibrarianResponseObject interface {
	VisitLibrarianResponse(w http.ResponseWriter) error
}

type Librarian200JSONResponse struct {
	LibrarianId *openapi_types.UUID `json:"librarian_id,omitempty"`
	Message     *string             `json:"message,omitempty"`
}

func (response Librarian200JSONResponse) VisitLibrarianResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Librarian401JSONResponse Error

func (response Librarian401JSONResponse) VisitLibrarianResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Librarian500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response Librarian500JSONResponse) VisitLibrarianResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200ResponseHeaders struct {
	SetCookie string
}

type Login200JSONResponse struct {
	Body struct {
		LibrarianId *openapi_types.UUID `json:"librarian_id,omitempty"`
		Message     *string             `json:"message,omitempty"`
	}
	Headers Login200ResponseHeaders
}

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type Login401JSONResponse Error

func (response Login401JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Login500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response Login500JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LogoutRequestObject struct {
}

type LogoutResponseObject interface {
	VisitLogoutResponse(w http.ResponseWriter) error
}

type Logout200JSONResponse struct {
	Message *string `json:"message,omitempty"`
}

func (response Logout200JSONResponse) VisitLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Logout500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response Logout500JSONResponse) VisitLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetOpenAPISpecRequestObject struct {
}

type GetOpenAPISpecResponseObject interface {
	VisitGetOpenAPISpecResponse(w http.ResponseWriter) error
}

type GetOpenAPISpec200JSONResponse json.RawMessage

func (response GetOpenAPISpec200JSONResponse) VisitGetOpenAPISpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOpenAPISpecdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetOpenAPISpecdefaultJSONResponse) VisitGetOpenAPISpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListOverdueRentalsRequestObject struct {
	Params ListOverdueRentalsParams
}

type ListOverdueRentalsResponseObject interface {
	VisitListOverdueRentalsResponse(w http.ResponseWriter) error
}

type ListOverdueRentals200JSONResponse struct {
	Pagination *PaginationInfo `json:"pagination,omitempty"`
	Results    *[]OverdueUser  `json:"results,omitempty"`
}

func (response ListOverdueRentals200JSONResponse) VisitListOverdueRentalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListOverdueRentals400JSONResponse struct {
	InvalidRequestParametersJSONResponse
}

func (response ListOverdueRentals400JSONResponse) VisitListOverdueRentalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListOverdueRentals401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response ListOverdueRentals401JSONResponse) VisitListOverdueRentalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListOverdueRentals500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListOverdueRentals500JSONResponse) VisitListOverdueRentalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListRentsRequestObject struct {
	Params ListRentsParams
}

type ListRentsResponseObject interface {
	VisitListRentsResponse(w http.ResponseWriter) error
}

type ListRents200JSONResponse struct {
	Pagination *PaginationInfo `json:"pagination,omitempty"`
	Results    *[]RentSummary  `json:"results,omitempty"`
}

func (response ListRents200JSONResponse) VisitListRentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListRents400JSONResponse struct {
	InvalidRequestParametersJSONResponse
}

func (response ListRents400JSONResponse) VisitListRentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListRents401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response ListRents401JSONResponse) VisitListRentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListRents500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListRents500JSONResponse) VisitListRentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateRentTransactionRequestObject struct {
	Body *CreateRentTransactionJSONRequestBody
}

type CreateRentTransactionResponseObject interface {
	VisitCreateRentTransactionResponse(w http.ResponseWriter) error
}

type CreateRentTransaction201JSONResponse struct {
	CartId  *openapi_types.UUID `json:"cart_id,omitempty"`
	Message *string             `json:"message,omitempty"`
}

func (response CreateRentTransaction201JSONResponse) VisitCreateRentTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateRentTransaction400JSONResponse struct{ InvalidRequestBodyJSONResponse }

func (response CreateRentTransaction400JSONResponse) VisitCreateRentTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateRentTransaction401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response CreateRentTransaction401JSONResponse) VisitCreateRentTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateRentTransaction500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateRentTransaction500JSONResponse) VisitCreateRentTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRentalReportsRequestObject struct {
	Params GetRentalReportsParams
}

type GetRentalReportsResponseObject interface {
	VisitGetRentalReportsResponse(w http.ResponseWriter) error
}

type GetRentalReports200JSONResponse RentReport

func (response GetRentalReports200JSONResponse) VisitGetRentalReportsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRentalReports400JSONResponse struct {
	InvalidRequestParametersJSONResponse
}

func (response GetRentalReports400JSONResponse) VisitGetRentalReportsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRentalReports401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetRentalReports401JSONResponse) VisitGetRentalReportsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetRentalReports500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetRentalReports500JSONResponse) VisitGetRentalReportsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRentedBooksByStudentRequestObject struct {
	Params GetRentedBooksByStudentParams
}

type GetRentedBooksByStudentResponseObject interface {
	VisitGetRentedBooksByStudentResponse(w http.ResponseWriter) error
}

type GetRentedBooksByStudent200JSONResponse struct {
	Pagination *PaginationInfo `json:"pagination,omitempty"`
	Results    *[]RentSummary  `json:"results,omitempty"`
}

func (response GetRentedBooksByStudent200JSONResponse) VisitGetRentedBooksByStudentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRentedBooksByStudent400JSONResponse struct {
	InvalidRequestParametersJSONResponse
}

func (response GetRentedBooksByStudent400JSONResponse) VisitGetRentedBooksByStudentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRentedBooksByStudent401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetRentedBooksByStudent401JSONResponse) VisitGetRentedBooksByStudentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetRentedBooksByStudent500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetRentedBooksByStudent500JSONResponse) VisitGetRentedBooksByStudentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReturnBooksRequestObject struct {
	Body *ReturnBooksJSONRequestBody
}

type ReturnBooksResponseObject interface {
	VisitReturnBooksResponse(w http.ResponseWriter) error
}

type ReturnBooks200JSONResponse struct {
	CartId  *openapi_types.UUID `json:"cart_id,omitempty"`
	Message *string             `json:"message,omitempty"`
}

func (response ReturnBooks200JSONResponse) VisitReturnBooksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReturnBooks400JSONResponse struct{ InvalidRequestBodyJSONResponse }

func (response ReturnBooks400JSONResponse) VisitReturnBooksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReturnBooks401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response ReturnBooks401JSONResponse) VisitReturnBooksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReturnBooks500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ReturnBooks500JSONResponse) VisitReturnBooksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListAllStudentsRequestObject struct {
	Params ListAllStudentsParams
}

type ListAllStudentsResponseObject interface {
	VisitListAllStudentsResponse(w http.ResponseWriter) error
}

type ListAllStudents200JSONResponse struct {
	Pagination *PaginationInfo `json:"pagination,omitempty"`
	Results    *[]Students     `json:"results,omitempty"`
}

func (response ListAllStudents200JSONResponse) VisitListAllStudentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListAllStudents400JSONResponse struct {
	InvalidRequestParametersJSONResponse
}

func (response ListAllStudents400JSONResponse) VisitListAllStudentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListAllStudents401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response ListAllStudents401JSONResponse) VisitListAllStudentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListAllStudents500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListAllStudents500JSONResponse) VisitListAllStudentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AddStudentRequestObject struct {
	Body *AddStudentJSONRequestBody
}

type AddStudentResponseObject interface {
	VisitAddStudentResponse(w http.ResponseWriter) error
}

type AddStudent201ResponseHeaders struct {
	Location string
}

type AddStudent201JSONResponse struct {
	Body struct {
		Message *string `json:"message,omitempty"`
	}
	Headers AddStudent201ResponseHeaders
}

func (response AddStudent201JSONResponse) VisitAddStudentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type AddStudent400JSONResponse struct{ InvalidRequestBodyJSONResponse }

func (response AddStudent400JSONResponse) VisitAddStudentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddStudent401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response AddStudent401JSONResponse) VisitAddStudentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AddStudent500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response AddStudent500JSONResponse) VisitAddStudentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteStudentByIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteStudentByIdResponseObject interface {
	VisitDeleteStudentByIdResponse(w http.ResponseWriter) error
}

type DeleteStudentById201Response struct {
}

func (response DeleteStudentById201Response) VisitDeleteStudentByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type DeleteStudentById401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response DeleteStudentById401JSONResponse) VisitDeleteStudentByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteStudentById404JSONResponse struct {
	Message *string `json:"message,omitempty"`
}

func (response DeleteStudentById404JSONResponse) VisitDeleteStudentByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteStudentById500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteStudentById500JSONResponse) VisitDeleteStudentByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetStudentByIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetStudentByIdResponseObject interface {
	VisitGetStudentByIdResponse(w http.ResponseWriter) error
}

type GetStudentById200JSONResponse Students

func (response GetStudentById200JSONResponse) VisitGetStudentByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStudentById401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetStudentById401JSONResponse) VisitGetStudentByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetStudentById404JSONResponse struct {
	Message *string `json:"message,omitempty"`
}

func (response GetStudentById404JSONResponse) VisitGetStudentByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetStudentById500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetStudentById500JSONResponse) VisitGetStudentByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List or search books (order by newly created books)
	// (GET /books)
	ListOrSearchBooks(ctx context.Context, request ListOrSearchBooksRequestObject) (ListOrSearchBooksResponseObject, error)
	// Add a new book
	// (POST /books)
	AddBook(ctx context.Context, request AddBookRequestObject) (AddBookResponseObject, error)
	// Delete a Book by ID
	// (DELETE /books/{id})
	DeleteBookById(ctx context.Context, request DeleteBookByIdRequestObject) (DeleteBookByIdResponseObject, error)
	// Librarian profile
	// (GET /librarian)
	Librarian(ctx context.Context, request LibrarianRequestObject) (LibrarianResponseObject, error)
	// Librarian login
	// (POST /login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)
	// Logout librarian
	// (POST /logout)
	Logout(ctx context.Context, request LogoutRequestObject) (LogoutResponseObject, error)
	// Get this OpenAPI spec
	// (GET /openapi.json)
	GetOpenAPISpec(ctx context.Context, request GetOpenAPISpecRequestObject) (GetOpenAPISpecResponseObject, error)
	// Get overdue rentals
	// (GET /overdues)
	ListOverdueRentals(ctx context.Context, request ListOverdueRentalsRequestObject) (ListOverdueRentalsResponseObject, error)
	// Get list of all rents with optional filters
	// (GET /rents)
	ListRents(ctx context.Context, request ListRentsRequestObject) (ListRentsResponseObject, error)
	// Create rental transaction
	// (POST /rents)
	CreateRentTransaction(ctx context.Context, request CreateRentTransactionRequestObject) (CreateRentTransactionResponseObject, error)
	// Get rental report
	// (GET /reports)
	GetRentalReports(ctx context.Context, request GetRentalReportsRequestObject) (GetRentalReportsResponseObject, error)
	// List books currently rented by a student
	// (GET /returns)
	GetRentedBooksByStudent(ctx context.Context, request GetRentedBooksByStudentRequestObject) (GetRentedBooksByStudentResponseObject, error)
	// Mark a cart as returned
	// (PUT /returns)
	ReturnBooks(ctx context.Context, request ReturnBooksRequestObject) (ReturnBooksResponseObject, error)
	// List all students
	// (GET /students)
	ListAllStudents(ctx context.Context, request ListAllStudentsRequestObject) (ListAllStudentsResponseObject, error)
	// Register a new student
	// (POST /students)
	AddStudent(ctx context.Context, request AddStudentRequestObject) (AddStudentResponseObject, error)
	// Delete a Student by ID
	// (DELETE /students/{id})
	DeleteStudentById(ctx context.Context, request DeleteStudentByIdRequestObject) (DeleteStudentByIdResponseObject, error)
	// Get a Student by ID
	// (GET /students/{id})
	GetStudentById(ctx context.Context, request GetStudentByIdRequestObject) (GetStudentByIdResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListOrSearchBooks operation middleware
func (sh *strictHandler) ListOrSearchBooks(w http.ResponseWriter, r *http.Request, params ListOrSearchBooksParams) {
	var request ListOrSearchBooksRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListOrSearchBooks(ctx, request.(ListOrSearchBooksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListOrSearchBooks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListOrSearchBooksResponseObject); ok {
		if err := validResponse.VisitListOrSearchBooksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddBook operation middleware
func (sh *strictHandler) AddBook(w http.ResponseWriter, r *http.Request) {
	var request AddBookRequestObject

	var body AddBookJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AddBook(ctx, request.(AddBookRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddBook")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AddBookResponseObject); ok {
		if err := validResponse.VisitAddBookResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteBookById operation middleware
func (sh *strictHandler) DeleteBookById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request DeleteBookByIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteBookById(ctx, request.(DeleteBookByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteBookById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteBookByIdResponseObject); ok {
		if err := validResponse.VisitDeleteBookByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Librarian operation middleware
func (sh *strictHandler) Librarian(w http.ResponseWriter, r *http.Request) {
	var request LibrarianRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Librarian(ctx, request.(LibrarianRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Librarian")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LibrarianResponseObject); ok {
		if err := validResponse.VisitLibrarianResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Login operation middleware
func (sh *strictHandler) Login(w http.ResponseWriter, r *http.Request) {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Logout operation middleware
func (sh *strictHandler) Logout(w http.ResponseWriter, r *http.Request) {
	var request LogoutRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Logout(ctx, request.(LogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Logout")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LogoutResponseObject); ok {
		if err := validResponse.VisitLogoutResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetOpenAPISpec operation middleware
func (sh *strictHandler) GetOpenAPISpec(w http.ResponseWriter, r *http.Request) {
	var request GetOpenAPISpecRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetOpenAPISpec(ctx, request.(GetOpenAPISpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOpenAPISpec")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetOpenAPISpecResponseObject); ok {
		if err := validResponse.VisitGetOpenAPISpecResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListOverdueRentals operation middleware
func (sh *strictHandler) ListOverdueRentals(w http.ResponseWriter, r *http.Request, params ListOverdueRentalsParams) {
	var request ListOverdueRentalsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListOverdueRentals(ctx, request.(ListOverdueRentalsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListOverdueRentals")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListOverdueRentalsResponseObject); ok {
		if err := validResponse.VisitListOverdueRentalsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListRents operation middleware
func (sh *strictHandler) ListRents(w http.ResponseWriter, r *http.Request, params ListRentsParams) {
	var request ListRentsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListRents(ctx, request.(ListRentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListRents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListRentsResponseObject); ok {
		if err := validResponse.VisitListRentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateRentTransaction operation middleware
func (sh *strictHandler) CreateRentTransaction(w http.ResponseWriter, r *http.Request) {
	var request CreateRentTransactionRequestObject

	var body CreateRentTransactionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateRentTransaction(ctx, request.(CreateRentTransactionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateRentTransaction")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateRentTransactionResponseObject); ok {
		if err := validResponse.VisitCreateRentTransactionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRentalReports operation middleware
func (sh *strictHandler) GetRentalReports(w http.ResponseWriter, r *http.Request, params GetRentalReportsParams) {
	var request GetRentalReportsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRentalReports(ctx, request.(GetRentalReportsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRentalReports")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRentalReportsResponseObject); ok {
		if err := validResponse.VisitGetRentalReportsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRentedBooksByStudent operation middleware
func (sh *strictHandler) GetRentedBooksByStudent(w http.ResponseWriter, r *http.Request, params GetRentedBooksByStudentParams) {
	var request GetRentedBooksByStudentRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRentedBooksByStudent(ctx, request.(GetRentedBooksByStudentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRentedBooksByStudent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRentedBooksByStudentResponseObject); ok {
		if err := validResponse.VisitGetRentedBooksByStudentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReturnBooks operation middleware
func (sh *strictHandler) ReturnBooks(w http.ResponseWriter, r *http.Request) {
	var request ReturnBooksRequestObject

	var body ReturnBooksJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReturnBooks(ctx, request.(ReturnBooksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReturnBooks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReturnBooksResponseObject); ok {
		if err := validResponse.VisitReturnBooksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAllStudents operation middleware
func (sh *strictHandler) ListAllStudents(w http.ResponseWriter, r *http.Request, params ListAllStudentsParams) {
	var request ListAllStudentsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAllStudents(ctx, request.(ListAllStudentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAllStudents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAllStudentsResponseObject); ok {
		if err := validResponse.VisitListAllStudentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddStudent operation middleware
func (sh *strictHandler) AddStudent(w http.ResponseWriter, r *http.Request) {
	var request AddStudentRequestObject

	var body AddStudentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AddStudent(ctx, request.(AddStudentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddStudent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AddStudentResponseObject); ok {
		if err := validResponse.VisitAddStudentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteStudentById operation middleware
func (sh *strictHandler) DeleteStudentById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request DeleteStudentByIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteStudentById(ctx, request.(DeleteStudentByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteStudentById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteStudentByIdResponseObject); ok {
		if err := validResponse.VisitDeleteStudentByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetStudentById operation middleware
func (sh *strictHandler) GetStudentById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetStudentByIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetStudentById(ctx, request.(GetStudentByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStudentById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetStudentByIdResponseObject); ok {
		if err := validResponse.VisitGetStudentByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"5lKb0YvBiwFdXi//FwAA//+d9H3+PkMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
